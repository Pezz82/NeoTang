#!/usr/bin/env bash
#───────────────────────────────────────────────────────────────
#  build_open.sh  –  open‑source build for NeoGeo‑Tang core
#  Usage:  ./build_open.sh [60k|138k]   (default 138k)
#───────────────────────────────────────────────────────────────
set -e
BOARD=${1:-138k}
case "$BOARD" in
  60k|60K)   DEVICE=GW5AST-60C  ;;
  138k|138K) DEVICE=GW5AST-138C ;;
  *) echo "BOARD must be 60k or 138k"; exit 1 ;;
esac
echo "▶ Building for Tang Console $BOARD  (device $DEVICE)"

#──────── locate toolchain ────────
if command -v yosys >/dev/null && command -v nextpnr-gowin >/dev/null; then
    YOSYS=yosys; NPNR=nextpnr-gowin; PACK=gowin_pack
else
    PYBIN=$(python - <<<'import sys,shutil,site;print(shutil.which("yowasp-yosys") or "")')
    [[ -z $PYBIN ]] && { echo "Error: Yosys not found.  Install OSS‑CAD‑Suite or yowasp‑yosys." ; exit 1; }
    YOSYS=$PYBIN; NPNR=nextpnr-gowin; PACK=gowin_pack   # rely on apycula CLI
fi

mkdir -p build sd/cores/console${BOARD}
rm -f build/neotang.{ys,json,pack,fs} build/yosys.log

#──────── generate Yosys script on‑the‑fly ────────
cat > build/neotang.ys <<'EOF'
# auto‑generated by build_open.sh
read_verilog -sv ip_stubs/gowin_pll.v
# pull every .v/.sv under src/, convert \ to / for Yosys
EOF
find src -type f \( -name '*.v' -o -name '*.sv' \) |
  sed 's|\\|/|g' | sort |
  awk '{print "read_verilog -sv ../"$0}' >> build/neotang.ys

cat >> build/neotang.ys <<'EOF'
hierarchy -top neotang_top
synth_gowin -json build/neotang.json
write_json  build/neotang.hierarchy.json
EOF

#──────── run synthesis ────────
"$YOSYS" -q -l build/yosys.log -c build/neotang.ys

#──────── place & route ────────
"$NPNR" --json build/neotang.json \
        --device $DEVICE \
        --package QFN88 \
        --cst constraints/${BOARD}.cst \
        --write build/neotang.pack

#──────── bitstream ────────
"$PACK" -d $DEVICE -o build/neotang.fs build/neotang.pack
gzip -9 < build/neotang.fs > sd/cores/console${BOARD}/neogeotang.bin

echo "✔ Done → sd/cores/console${BOARD}/neogeotang.bin" 